//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.two_heroes_with_friends.selections

import com.apollographql.apollo3.api.CompiledArgument
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CompiledIDType
import com.apollographql.apollo3.api.CompiledIntType
import com.apollographql.apollo3.api.CompiledSelection
import com.apollographql.apollo3.api.CompiledStringType
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.notNull
import com.example.two_heroes_with_friends.type.Character
import com.example.two_heroes_with_friends.type.FriendsConnection
import com.example.two_heroes_with_friends.type.FriendsEdge
import kotlin.collections.List

public object TestQuerySelections {
  private val node: List<CompiledSelection> = listOf(
        CompiledField(
          name = "name",
          type = CompiledStringType.notNull()
        )
      )

  private val edges: List<CompiledSelection> = listOf(
        CompiledField(
          name = "node",
          type = Character.type,
          selections = node
        )
      )

  private val friendsConnection: List<CompiledSelection> = listOf(
        CompiledField(
          name = "totalCount",
          type = CompiledIntType
        ),
        CompiledField(
          name = "edges",
          type = FriendsEdge.type.list(),
          selections = edges
        )
      )

  private val r2: List<CompiledSelection> = listOf(
        CompiledField(
          name = "name",
          type = CompiledStringType.notNull()
        ),
        CompiledField(
          name = "friendsConnection",
          type = FriendsConnection.type.notNull(),
          selections = friendsConnection
        )
      )

  private val node1: List<CompiledSelection> = listOf(
        CompiledField(
          name = "name",
          type = CompiledStringType.notNull()
        )
      )

  private val edges1: List<CompiledSelection> = listOf(
        CompiledField(
          name = "node",
          type = Character.type,
          selections = node1
        )
      )

  private val friendsConnection1: List<CompiledSelection> = listOf(
        CompiledField(
          name = "totalCount",
          type = CompiledIntType
        ),
        CompiledField(
          name = "edges",
          type = FriendsEdge.type.list(),
          selections = edges1
        )
      )

  private val luke: List<CompiledSelection> = listOf(
        CompiledField(
          name = "id",
          type = CompiledIDType.notNull()
        ),
        CompiledField(
          name = "name",
          type = CompiledStringType.notNull()
        ),
        CompiledField(
          name = "friendsConnection",
          type = FriendsConnection.type.notNull(),
          selections = friendsConnection1
        )
      )

  public val root: List<CompiledSelection> = listOf(
        CompiledField(
          name = "hero",
          alias = "r2",
          type = Character.type,
          selections = r2
        ),
        CompiledField(
          name = "hero",
          alias = "luke",
          type = Character.type,
          arguments = listOf(
            CompiledArgument("episode", "EMPIRE")
          ),
          selections = luke
        )
      )
}
